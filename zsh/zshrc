# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
if [ -d "/usr/local/opt/llvm/bin/" ]; then
  export PATH=/usr/local/opt/llvm/bin/:$PATH
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="flazz"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
source $ZSH/antigen.zsh
antigen bundle zsh-users/zsh-autosuggestions
antigen apply

plugins=(
  git
  vi-mode
  z
  fzf
  kubectl
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export EDITOR=nvim
export VISUAL="$EDITOR"
# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias vim=nvim
alias vi=nvim
alias lg=lazygit

# Use ~/.zshrc.local for your own customisation
source "${HOME}/.zshrc.local"

# Utils functions

bold=$(tput bold)
underline=$(tput sgr 0 1)
reset=$(tput sgr0)

green=$(tput setaf 76)
blue=$(tput setaf 38)
tan=$(tput setaf 3)
red=$(tput setaf 1)

function e_arrow() {
  printf "➜ $1\n"
}

function e_success() {
  printf "${green}✔ %s${reset}\n" "$@"
}

function e_warning() {
  printf "${tan}➜ %s${reset}\n" "$@"
}

function e_error() {
  printf "${red}✖ %s${reset}\n" "$@"
}

function e_bold() {
  printf "${bold}%s${reset}\n" "$@"
}

function e_note() {
  printf "${underline}${bold}${blue}Note:${reset}  ${blue}%s${reset}\n" "$@"
}

# Greeting message
function gretting_message() {
  e_bold "Host name: $(hostname), User: $(whoami)"
  e_success "On $(sw_vers -productName)$(sw_vers -productVersion), build version: $(sw_vers -buildVersion)"
  e_success "Shell: $(zsh --version)"
  e_success "Terminal color: $TERM"
  e_success "Uptime: $(uptime | sed 's/.*up \([^,]*\), .*/\1/')"

  echo "Hello Huy Duong.\n\nHave a good day!" | cowsay | lolcat
}

# Open project under workspace folder
function workspace_fzf() {
  cd $WORKSPACE; ls -d */ | fzfp | { cd -; read result; cd $WORKSPACE/$result }
  zle && zle reset-prompt
}

# Lauch application
function open_app_fzf() {
  local app=$((ls /Applications; ls /System/Applications/; ls /System/Applications/Utilities) | cat | sed 's/.app//g' | fzf)
  open -a $app
}

# Run frequently used commands
# First param take local path to set of commands, i.e. ~/local/cmds
function run_cmds_fzf() {
  echo $1
  local cmd=$(cat $1 | ${2-"fzfp"})
  if [ -n "$cmd" ]; then
    local escape=$(echo $cmd | sed 's/[]\/$*.^[]/\\&/g')
    echo -e "$cmd\n$(cat $1 | sed "s/$escape//g" | sed '/^$/d')" > $1
    echo ""
    echo $fg[yellow] "$cmd"
    echo ""
    eval $cmd
  else
    echo $fg[red] "Run nothing!"
  fi
}

function reboot() {
  close_all_apps

  sudo reboot
}

function shutdown() {
  close_all_apps

  sudo shutdown -h now
}

function close_all_apps() {
  apps=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)' | awk -F ', ' '{for(i=1;i<=NF;i++) printf "%s;", $i}')
  while [ "$apps" ] ;do
    app=${apps%%;*}
    if [[ $app != 'alacritty' && $app != 'kitty' ]]
    then
      pkill -x echo $app
    fi

    [ "$apps" = "$app" ] && \
        apps='' || \
        apps="${apps#*;}"
  done
}

function kill_app_fzf() {
  select_app=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)' | awk -F ', ' '{for(i=1;i<=NF;i++) printf "%s\n", $i}'  | fzf)
  if [ -n "$select_app" ]; then
    printf "${bold}Do you want to kill ${select_app}? (y/n)${reset}\n"
    read
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      pkill -x "${select_app}"
    fi
  fi
}

# Select password using fzf
function pass_fzf() {
  local prompt='Search password: '
  local fzf_cmd="fzf --print-query --prompt=\"$prompt\""

  if [ -n "$term" ]; then
    fzf_cmd="$fzf_cmd -q\"$term\""
  fi

  fzf_cmd="$fzf_cmd | tail -n1"

  if [ ! -d $HOME/.password-store ]; then
    e_error "Could not locate password store directory. Please ensure $HOME/.password-store is setup."
    return
  fi

  passfile=$(find -L "$HOME/.password-store" -path '*/.git' -prune -o -iname '*.gpg' -print \
        | sed -e 's/.gpg$//' | sed -e 's/\/Users\/'$(whoami)'\/.password-store\///' \
        | sort \
        | eval "$fzf_cmd" )

  if [ -z "$passfile" ]; then
    e_warning 'No passfile selected.'
    return
  fi

  pass show "$passfile" --clip || return
}

function fzfp() {
  fail() {
      echo "$1" >&2
      exit 2
  }

  fzf=$(command -v fzf 2>/dev/null) || fzf=$(dirname $0)/fzf
  [[ -x "$fzf" ]] || fail 'fzf executable not found'

  if [[ -n $TMUX_POPUP_NESTED_FB ]]; then
      eval "$TMUX_POPUP_NESTED_FB" && exec fzf "$@"
  fi

  args=('--no-height')
  while (($#)); do
      arg=$1
      case $arg in
      --height | --width)
          eval "${arg:2}=$2"
          shift
          ;;
      --height=* | --width=*)
          eval "${arg:2}"
          ;;
      *)
          args+=("$arg")
          ;;
      esac
      shift
  done

  opts=$(printf '%q ' "${args[@]}")

  [[ -z $height ]] && height=${TMUX_POPUP_HEIGHT:-80%}
  [[ -z $width ]] && width=${TMUX_POPUP_WIDTH:-80%}

  envs="SHELL=$SHELL"
  [[ -n $FZF_DEFAULT_OPTS ]] && envs="$envs FZF_DEFAULT_OPTS=$(printf %q "$FZF_DEFAULT_OPTS")"
  [[ -n $FZF_DEFAULT_COMMAND ]] && envs="$envs FZF_DEFAULT_COMMAND=$(printf %q "$FZF_DEFAULT_COMMAND")"

  id=$RANDOM
  cmd_file="${TMPDIR:-/tmp}/fzf-cmd-file-$id"
  pstdin="${TMPDIR:-/tmp}/fzf-pstdin-$id"
  pstdout="${TMPDIR:-/tmp}/fzf-pstdout-$id"

  clean_cmd="command rm -f $cmd_file $pstdin $pstdout"

  cleanup() {
      eval "$clean_cmd"
  }
  trap 'cleanup' EXIT

  mkfifo "$pstdout"

  echo -n "trap '$clean_cmd' EXIT SIGINT SIGTERM SIGHUP;" >"$cmd_file"

  if [[ -t 0 ]]; then
      echo -n "$fzf $opts > $pstdout" >>"$cmd_file"
  else
      mkfifo "$pstdin"
      echo -n "$fzf $opts < $pstdin > $pstdout" >>"$cmd_file"
      cat <&0 >"$pstdin" &
  fi
  cat "$pstdout" &

  tmux popup -d '#{pane_current_path}' -xC -yC -w$width -h$height -E "$envs zsh $cmd_file"
}

autoload -z edit-command-line
zle -N edit-command-line

# Key bindings
bindkey '^ ' autosuggest-accept
zle -N workspace_fzf
bindkey '^w' workspace_fzf 
bindkey '^v' edit-command-line

if [ -z "$IGNORE_GREETING_MESSAGE" ]
then
  gretting_message
fi

export LF_ICONS="\
tw=:\
st=:\
ow=:\
dt=:\
di=:\
fi=:\
ln=:\
or=:\
ex=:\
*.c=:\
*.cc=:\
*.clj=:\
*.coffee=:\
*.cpp=:\
*.css=:\
*.d=:\
*.dart=:\
*.erl=:\
*.exs=:\
*.fs=:\
*.go=:\
*.h=:\
*.hh=:\
*.hpp=:\
*.hs=:\
*.html=:\
*.java=:\
*.jl=:\
*.js=:\
*.json=:\
*.lua=:\
*.md=:\
*.php=:\
*.pl=:\
*.pro=:\
*.py=:\
*.rb=:\
*.rs=:\
*.scala=:\
*.ts=:\
*.vim=:\
*.cmd=:\
*.ps1=:\
*.sh=:\
*.bash=:\
*.zsh=:\
*.fish=:\
*.tar=:\
*.tgz=:\
*.arc=:\
*.arj=:\
*.taz=:\
*.lha=:\
*.lz4=:\
*.lzh=:\
*.lzma=:\
*.tlz=:\
*.txz=:\
*.tzo=:\
*.t7z=:\
*.zip=:\
*.z=:\
*.dz=:\
*.gz=:\
*.lrz=:\
*.lz=:\
*.lzo=:\
*.xz=:\
*.zst=:\
*.tzst=:\
*.bz2=:\
*.bz=:\
*.tbz=:\
*.tbz2=:\
*.tz=:\
*.deb=:\
*.rpm=:\
*.jar=:\
*.war=:\
*.ear=:\
*.sar=:\
*.rar=:\
*.alz=:\
*.ace=:\
*.zoo=:\
*.cpio=:\
*.7z=:\
*.rz=:\
*.cab=:\
*.wim=:\
*.swm=:\
*.dwm=:\
*.esd=:\
*.jpg=:\
*.jpeg=:\
*.mjpg=:\
*.mjpeg=:\
*.gif=:\
*.bmp=:\
*.pbm=:\
*.pgm=:\
*.ppm=:\
*.tga=:\
*.xbm=:\
*.xpm=:\
*.tif=:\
*.tiff=:\
*.png=:\
*.svg=:\
*.svgz=:\
*.mng=:\
*.pcx=:\
*.mov=:\
*.mpg=:\
*.mpeg=:\
*.m2v=:\
*.mkv=:\
*.webm=:\
*.ogm=:\
*.mp4=:\
*.m4v=:\
*.mp4v=:\
*.vob=:\
*.qt=:\
*.nuv=:\
*.wmv=:\
*.asf=:\
*.rm=:\
*.rmvb=:\
*.flc=:\
*.avi=:\
*.fli=:\
*.flv=:\
*.gl=:\
*.dl=:\
*.xcf=:\
*.xwd=:\
*.yuv=:\
*.cgm=:\
*.emf=:\
*.ogv=:\
*.ogx=:\
*.aac=:\
*.au=:\
*.flac=:\
*.m4a=:\
*.mid=:\
*.midi=:\
*.mka=:\
*.mp3=:\
*.mpc=:\
*.ogg=:\
*.ra=:\
*.wav=:\
*.oga=:\
*.opus=:\
*.spx=:\
*.xspf=:\
*.pdf=:\
*.nix=:\
"
