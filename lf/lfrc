# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

set drawbox true
set icons true
set ignorecase true
set hidden
set ratios 1:1:2
set incsearch
set info size
set tabstop 4
set promptfmt "\033[34;1m%w\033[0m\033[1m%f\033[0m"

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# move current file or selected files to trash folder
cmd trash %set -f; mv $fx ~/.trash

map T trash
map D delete 

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# create file
cmd touch ${{
    touch $1
}}

# create folder
cmd mkdir ${{
    mkdir $1
}}

cmd open &$OPENER "$f"

# shortcuts
map g~ cd ~
map gd cd ~/Downloads
map gD cd ~/Documents
map gw cd ~/Workspace
map gh cd ~/Desktop
map g/ cd /

map ` mark-load
map <space> :toggle
map <enter> open
